#!/usr/bin/python

# Just a little Python script to churn out HTML posts for my class discussion
# boards. Requires beautifulsoup4, pypandoc, and watchdog

import argparse
import os.path
import time

from bs4 import BeautifulSoup
import click
from pygments import highlight
from pygments.lexers.html import HtmlLexer
from pygments.formatters.terminal import TerminalFormatter
import pypandoc
import pyperclip
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler

def init_file(filename):
    post_template = '---\nauthor: Sean Gallagher\ntitle: "Post Title"\n---\n'
    while True:
        if '.md' in filename and os.path.exists(filename):
            return filename
        elif '.' not in filename:
            filename += '.md'
        else:
            with open(filename, 'w') as f:
                f.write(post_template)
            print('Created new post file {}'.format(filename))

def init_args():
    desc = 'Process a Markdown source into an HTML post, suitable for posting.'

    # These four args toggle the different build modes
    parser = argparse.ArgumentParser(description=desc)

    # Debug and watch are toggle switches
    parser.add_argument('-d', '--debug', action='store_true',
                        help='Output HTML to stdout')
    parser.add_argument('-w', '--watch', action='store_true',
                        help='Start watching the source for changes')
    # The remaining positional arg is the source file
    parser.add_argument('source_file', default='main.md',
                        help='The path to the input file', metavar="FILE",
                        type=lambda x: init_file(x))

    args = parser.parse_args()
    return args

class Post:
    def __init__(self, args):
        self.debug = args.debug
        self.debug_str = ''
        self.soup = None
        self.source_file = args.source_file
        self.watch = args.watch
        if self.debug:
            self.build_num = 0

    def add_footnote_styles(self):
        for result in self.soup.find_all('sup'):
            result['style'] = 'font-size: small;'
            if self.debug:
                self.debug_str += 'Added style to result {}\n'.format(
                    result.contents[0]
                )
        for result in self.soup.find_all('section', class_='footnotes'):
            result['style'] = 'font-size: small;'

    def add_reference_styles(self):
        for refs_section in self.soup.find_all('div', class_='references'):
            refs_section['style'] = 'text-indent: -2rem; padding-left: 2rem;'

    def build(self):
        if self.debug:
            self.build_num += 1
            self.debug_str = 'Debug Mode:\nFilename: {}\n'.format(
                self.source_file
            )
            if self.watch:
                self.debug_str += 'Watching\nBuild Number: {}\n'.format(
                    self.build_num
                )
        raw_html = pypandoc.convert_file(
            self.source_file,
            to='html', format='md',
            extra_args=['--wrap=preserve', '--mathml'],
            filters='pandoc-citeproc'
        )
        self.soup = BeautifulSoup(raw_html, 'html.parser')
        self.add_footnote_styles()
        self.add_reference_styles()

    def copy(self):
        if self.debug:
            self.format_debug_output()
        output = str(self.soup)
        pyperclip.copy(output)
        print('Post copied to CLIPBOARD')

    def format_debug_output(self):
        self.debug_str += highlight(
            self.soup.prettify(),
            HtmlLexer(),
            TerminalFormatter()
        )
        click.echo_via_pager(self.debug_str)


class SourceChangeEventHandler(FileSystemEventHandler):
    def __init__(self, post):
        FileSystemEventHandler.__init__(self)
        self.post = post

    def on_modified(self, event):
        self.post.build()
        self.post.copy()

class PostWatcher():
    def __init__(self, post):
        self.observer = Observer()
        self.event_handler = SourceChangeEventHandler(post)
        self.filename = post.source_file

    def start(self):
        self.observer.schedule(self.event_handler, path=self.filename)
        print('Watching post for changes. Press Ctrl+c to exit.')
        self.observer.start()

        try:
            while True:
                time.sleep(1)
        except KeyboardInterrupt:
            self.observer.stop()
        self.observer.join()

def main():
    args = init_args()
    post = Post(args)
    if args.watch:
        watcher = PostWatcher(post)
        watcher.start()
    else:
        post.build()
        post.copy()

if __name__ == "__main__":
    main()
