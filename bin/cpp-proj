#!/bin/bash

usagestr="cpp-proj simple|complex|opengl project_name
Creates a C++ project using the specified template:

    simple   A simple project consists of a single .cpp file in the src/ directory,
             along with the necessary Makefile to enable compilation at the command
             line.
    complex  A complex project creates a main file, a functions .cpp file, and a
             functions header file, along with the necessary Makefile to enable
             compilation at the command line.
    opengl   An OpenGL project is like a simple project, but it uses CMake to facilitate
             the complexity of OpenGL."

print_usage() {
    printf "$usagestr"
}

create_project_dir() {
    if mkdir $1; then
        cd $1
    else
        exit 1
    fi
}

prepare_makefile() {
    if [[ $# -eq 1 ]]; then
        curl -O https://raw.githubusercontent.com/mbcrawfo/GenericMakefile/master/cpp/Makefile
        sed --in-place "s/hello/${1}/" Makefile
        sed --in-place "s/ \.$/ src/" Makefile
    elif [[ $# -eq 2 && $1 == "--opengl"  ]]; then
        printf "cmake_minimum_required(VERSION 3.16)
project(CameraMovement)

set(CMAKE_CXX_STANDARD 14)

add_executable(CameraMovement src/main.cpp)

find_package(OpenGL REQUIRED)
find_package(GLEW REQUIRED)
find_package(GLUT REQUIRED)
target_link_libraries(CameraMovement GL GLEW glut)

add_custom_target(run COMMAND ./CameraMovement)
add_dependencies(run CameraMovement)" > CMakeLists.txt
        cmake ./
    fi
}

create_complex_project() {
    create_project_dir $1
    prepare_makefile $1
    mkdir src
    printf "#include <iostream>
#include \"functions.hpp\"
using namespace std;

int main() {
  ${1}();
  return 0;
}" > "src/main.cpp"
    printf "#include <iostream>
#include \"functions.hpp\"
using namespace std;

void ${1}() {
   cout << \"${1}\" << endl;
}" > "src/${1}.cpp"
    printf "void ${1}();" > "src/functions.hpp"
}

create_opengl_project() {
    create_project_dir $1
    mkdir src
    printf "#include <stdio.h>
#include <GL/glew.h>
#include <GL/glut.h>

// GLM Math header inclusions
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/type_ptr.hpp>

/* Display Callback Header */
void displayGraphics() {
    glClearColor(0.0f, 0.0f, 0.0f, 0.0f);
    glClear(GL_COLOR_BUFFER_BIT);
    glFlush();
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    // Create a window. The \"Test\" prefix is a cue to my WM
    glutCreateWindow(\"Test â€” Sean Gallagher\");
    glutInitWindowSize(640, 480);
    glutInitWindowPosition(0,0);
    glutDisplayFunc(displayGraphics);
    glutMainLoop();
    return 0;
}" > "src/main.cpp"
    prepare_makefile --opengl $1
    if [[ -f ../test.sh ]]; then
        cp ../test.sh ./
    fi
}

create_simple_project() {
    create_project_dir $1
    prepare_makefile $1
    mkdir src
    printf " #include <iostream>
using namespace std;

int main() {
  cout << \"${1}\" << endl;
}" > "src/main.cpp"
}

if [ $# -eq 2 ]; then
    case $1 in
        simple)
            create_simple_project $2
            ;;
        complex)
            create_complex_project $2
            ;;
        opengl)
            create_opengl_project $2
            ;;
        -h|--help)
            print_usage
            ;;
    esac
elif [ $# -eq 1 ]; then
    create_simple_project $1
else
    print_usage
fi
